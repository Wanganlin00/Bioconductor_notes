[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bioconductor_notes",
    "section": "",
    "text": "1 前言\nThis is a book about Single-Cell Analysis。\nTo learn more about Single-Cell Analysis visit https://bioconductor.org/books/release/OSCA/.\nCodelibrary(ggplot2)\nlibrary(BiocManager)\nCodeBiocManager::version()\nBiocManager::install()\nBiocManager::install(\"OSCA.intro\")\n来自单细胞RNA-seq实验的测序数据必须转换为表达值矩阵。这通常是一个计数矩阵，包含映射到每个细胞（列）中每个基因（行）的读取数。计数可以是唯一分子标识符 （unique molecular identifiers，UMI） 的数量。"
  },
  {
    "objectID": "index.html#实验设计",
    "href": "index.html#实验设计",
    "title": "Bioconductor_notes",
    "section": "\n3.1 实验设计",
    "text": "3.1 实验设计\nscRNA-Seq experimental protocols：\n\n基于液滴的方案，高通量，低成本，如10X Genomics、inDrop和Drop-seq；\n基于平板的方案，捕获其他表型信息（如形态学），并且更易于自定义\n基于UMI的平板方案，减轻了PCR扩增噪声的影响，如CEL-seq（2）和MARS-seq；\n基于读取的平板方案，提供全转录覆盖，（如剪接、外显子组突变），主要是Smart-seq2；\n其他方案，如sciRNA-seq。\n\n捕获细胞数目和测序深度"
  },
  {
    "objectID": "index.html#创建计数矩阵",
    "href": "index.html#创建计数矩阵",
    "title": "Bioconductor_notes",
    "section": "\n3.2 创建计数矩阵",
    "text": "3.2 创建计数矩阵\nCellranger\nalevin"
  },
  {
    "objectID": "index.html#导入计数矩阵",
    "href": "index.html#导入计数矩阵",
    "title": "Bioconductor_notes",
    "section": "\n3.3 导入计数矩阵",
    "text": "3.3 导入计数矩阵\n\n3.3.1 从表格格式\n从csv 文件导入计数矩阵，点击下载胰腺scRNA-seq数据集：GSE85241_cellsystems_dataset_4donors_updated.csv.gz(HTTP) 解压到data文件夹\n\nCodemat &lt;- as.matrix(read.delim(\"data/GSE85241_cellsystems_dataset_4donors_updated.csv\"))\ndim(mat)\n##&gt; [1] 19140  3072\n\n\n使用 scuttle 包中的函数以稀疏格式(sparse format)读取表。这仅存储非零值，并避免在低测序的scRNA-seq实验中将内存花费在大多数零上\n\nCodelibrary(scuttle,quietly = TRUE)\nconflicts_prefer(GenomicRanges::setdiff)\nsparse.mat &lt;- readSparseCounts(\"data/GSE85241_cellsystems_dataset_4donors_updated.csv\")\ndim(sparse.mat)\n##&gt; [1] 19140  3072\n\n\n比较两种方法的内存大小,查看Environment中的size大小，或者\n\nCodeobject.size(sparse.mat)\n##&gt; 150978872 bytes\nobject.size(mat)\n##&gt; 471999152 bytes\n\n\n从Excel 文件中导入计数矩阵,点击下载：GSE61533_HTSEQ_count_results.xls.gz(HTTP)解压到data文件夹\n\nCodelibrary(readxl)\nall.counts &lt;- read_excel(\"data/GSE61533_HTSEQ_count_results.xls\")\ngene.names &lt;- all.counts$ID\nall.counts &lt;- as.matrix(all.counts[,-1])\nrownames(all.counts) &lt;- gene.names\ndim(all.counts)\n##&gt; [1] 38498    96\n\n\n\n3.3.2 从 Cellranger 输出\n对于 10X Genomics 数据，Cellranger 软件套件将生成一个包含计数和特征/条形码注释的输出目录。 点击下载：Gene / cell matrix (filtered)\n\nCodelibrary(DropletUtils)\nsce &lt;- read10xCounts(\"data/filtered_gene_bc_matrices/GRCh38\")\nsce\n##&gt; class: SingleCellExperiment \n##&gt; dim: 33694 4340 \n##&gt; metadata(1): Samples\n##&gt; assays(1): counts\n##&gt; rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475\n##&gt;   ENSG00000268674\n##&gt; rowData names(2): ID Symbol\n##&gt; colnames: NULL\n##&gt; colData names(2): Sample Barcode\n##&gt; reducedDimNames(0):\n##&gt; mainExpName: NULL\n##&gt; altExpNames(0):\n\n\n通过将多个目录路径传递给read10xCounts()来读取多个计数矩阵。如果所有数据集都具有相同的基因注释，则该函数将能够将它们组合到单个对象中。\n\nCodedirA &lt;- \"data/filtered_gene_bc_matrices/GRCh38\"\ndirB &lt;- \"data/filtered_gene_bc_matrices - 副本/GRCh38\" #复制 \nsce &lt;- read10xCounts(c(dirA, dirB))\nsce\n##&gt; class: SingleCellExperiment \n##&gt; dim: 33694 8680 \n##&gt; metadata(1): Samples\n##&gt; assays(1): counts\n##&gt; rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475\n##&gt;   ENSG00000268674\n##&gt; rowData names(2): ID Symbol\n##&gt; colnames: NULL\n##&gt; colData names(2): Sample Barcode\n##&gt; reducedDimNames(0):\n##&gt; mainExpName: NULL\n##&gt; altExpNames(0):\n\n\n\n3.3.3 来自基于 HDF5 的格式\n一系列scRNA-seq存储格式基于分层数据格式第5版（HDF5）,无需将所有数据读入 R 即可进行基于bioconductor的分析,这使得在计算机内存有限的情况下分析非常大的数据集。 这些格式能够在同一文件中存储表达值以及相关的基因和细胞注释。\n这种方法的一种风格是 H5AD 格式。点击下载：Gene / cell matrix HDF5 (raw)\n\nCodelibrary(zellkonverter)\ndemo &lt;- system.file(\"extdata\", \"krumsiek11.h5ad\", package = \"zellkonverter\")\nsce &lt;- zellkonverter::readH5AD(demo)\nsce\n\n\n另一种风格是Loom 文件格式\n\nCodelibrary(LoomExperiment,quietly = TRUE)\ndemo &lt;- system.file(\"extdata\", \"L1_DRG_20_example.loom\", package = \"LoomExperiment\")\nscle &lt;- import(demo, type=\"SingleCellLoomExperiment\")\nscle\n##&gt; class: SingleCellLoomExperiment \n##&gt; dim: 20 20 \n##&gt; metadata(4): CreatedWith LOOM_SPEC_VERSION LoomExperiment-class\n##&gt;   MatrixName\n##&gt; assays(1): matrix\n##&gt; rownames: NULL\n##&gt; rowData names(7): Accession Gene ... X_Total X_Valid\n##&gt; colnames: NULL\n##&gt; colData names(103): Age AnalysisPool ... cDNA_Lib_Ok ngperul_cDNA\n##&gt; reducedDimNames(0):\n##&gt; mainExpName: NULL\n##&gt; altExpNames(0):\n##&gt; rowGraphs(0): NULL\n##&gt; colGraphs(2): KNN MKNN"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n2  Introduction\n",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee @knuth84 for additional discussion of literate programming.\n\nCode1 + 1\n##&gt; [1] 2"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n3  Summary\n",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\nCode1 + 1\n##&gt; [1] 2"
  }
]